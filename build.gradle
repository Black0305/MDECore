// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies.classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = "1.8.8-1.5"
group = "com.mattdahepic.mdecore" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mdecore"

minecraft {
    version = "1.8.8-11.14.4.1576-1.8.8"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "MDECore.java"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20151123"
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
apply plugin: 'idea'
idea.module.inheritOutputDirs = true;

//THE FOLLOWING IS BROKEN IF YOU KNOW HOW TO FIX IT LET ME KNOW

/**SIGNING:
 * To use PGP keys with jarsigner, make sure they are a RSA-style key and export them to a format understandable by jarsigner, such as x509 or pkcs12
 * The following commands document the process:
 * "./bin/gpg.exe" --homedir=./keydb --list-secret-keys  to get the key id,
 * "./bin/gpg.exe" --homedir=./keydb -o <keyid>_private.p12 --export <keyid> --export-format pkcs12 --cert <name> --export-passphrase <pass>  to export to pkcs12,
 * "C:\Program Files\Java\jdk1.8.0_51\bin\keytool.exe" -genkey -alias MattDahEpic -keystore mattdahepic.jks  to make a new keystore,
 * "C:\Program Files\Java\jdk1.8.0_51\bin\keytool.exe" -delete -alias MattDahEpic -keystore mattdahepic.jks  to remove the default key, and
 * "C:\Program Files\Java\jdk1.8.0_51\bin\keytool.exe" -v -importkeystore -srckeystore MattDahEpic_private.p12 -srcstoretype PKCS12 -destkeystore mattdahepic.jks -deststoretype JKS  to put it in a java keystore
 *
 *
 * @required jarsigner executable in PATH
 *
 * @required signing_alias = key name to sign with
 * @required signing_password = password to the key store
 * @required signing_keystore = path\to\key\store\file
 */
/**
task signJar (type: Exec, dependsOn: ["jar","devJar"]) {
    onlyIf {
        project.hasProperty("signing_alias") && project.hasProperty("signing_password") && project.hasProperty("signing_keystore")
    }

    //run jarsigner
    apply plugin: 'java'
    println "Signing jar"+jar.archivePath

    executable 'jarsigner' //https://docs.oracle.com/javase/tutorial/deployment/jar/signing.html
    args '-keystore', signing_keystore
    args '-storepass', signing_password
    args jar.archivePath
    args signing_alias
    args '-verbose'
}
tasks.build.dependsOn signJar
*/